Para comentar  com Python, utiliza-se # na linha ou ''' para algo mais longo.

String
	usa-se Str("texto")
	x = str("teste de print")
	
	
Se você colocar apenas x = 2, ele já é considerado como 2, sem precisar de int, float, double.

Transformando um x = 2 em float:
	x = float(2)
	
Input
	nome = input("texto")
		dessa forma, será por padrão colocado como String.
		
Print type
	print(type(x)) 
		ele printa o tipo de dado que x é.

Slicing
	vetorização das palavras e dos números
	se voce quer pegar o C da palavra abacate, a formatação é:
	fruta = 'abacate'
	print(fruta[3]) -> pega o "C"
	
Formatted String
	forma resumida de fazer um texto
	texto2 = f' Oii {a} voce tem quantos anos? eu tenho {b} ! ' 
		a string ja começa formatada a partir do primeiro apóstrofo.


Métodos de uma String
	só colocar um ponto após a string;
	mensagem = 'oi'
	print(mensagem.(metodo))
	print(mensagem.upper())
	print(mensagem.lower())
	print(mensagem.replace('adoro','amo')) # troca o "adoro" por "amo".
	print(mensagem.capitalize()) # deixa em maiúsculo a primeira letra.
	print(mensagem.find('a')) # procura em que local está a letra ou em que ponto começa uma palavra.
	print(mensagem.find('adoro'))
	print(mensagem.strip()) # remove qualquer espaço que tenha antes do primeiro caracter.
	
Comparadores
	== se é igual
	!- se é diferente
	> se é maior que
	< se é menor que 
	>= se é maior ou igual a 
	<= se é menor ou igual a 

Operadores de Atribuição
	x = 10
	
	x = x + 5 # x = 15 pode ser simplificado em -> x = += 5 # x = 15
	x = x - 5 # x = 5 pode ser simplificado em -> x = -= 5 # x = 5	
	x = x * 5 # x = 50 pode ser simplificado em -> x = *= 5 # x = 50
	x = x / 5 # x = 2 pode ser simplificado em -> x = /= 5 # x = 2
	x%3 = 3 # mostra o resto da divisão
	
If e Else
	velocidade = 100
	if velocidade > 110:
		print('Acima da velocidade permitida.')
		print('Favor reduzir a sua velocidade.')
		
	elif velocidade < 60: 				# pode ter quantos quiser
    print('Dirija acima de 80km/h') 

	else:
		print('Velocidade ok')
		
Operadores Lógicos
	if renda_acima_5mil and/or nome_limpo:
		print('Financiamento aprovado')
	else:
		print('Financiamento negado')
		
	

Sorted
	Ordena os números em ordem crescente em forma de vetor.
		ordenados = sorted([n1,n2,n3])
		print(ordenados[0],ordenados[1],ordenados[2])
		
For 
	Imprimir de 1 a 5 
	for numero in range (6):
		print(numero)
	
	
	valores = [10,20,30,40,50]
	for i in valores:
		print(f'O valor final do produto é de R$ {i}.')




XArgs
	def somar(*numeros) 
		um asterisco diz que são vários números
	def agencia(**carro): 
		dois asteriscos significam que são vários parâmetros e que você pode passa-los embaixo
    
	
Listas
	inicializa com colchetes
	cidades = ['Gramado', 'Santos', 'Garanhuns', 'Curitiba']

Funções do Python:
	cor_cliente.lower() - retira a sensibilidade do maiúsculo ou minúsculo do input.


Funções dentro de Listas - https://docs.python.org/3/tutorial/datastructures.html
	#list.append - adiciona um item no final da lista.
		cidades.append('Curitiba')
	
	#list.remove - remove um item da lista.
		cidades.remove('Garanhuns')
	
	#list.insert - adiciona um item na posição solicitada.
		cidades.insert(1, 'Porto de Galinhas') # [1] = antes de Santos, depois de Gramado.
	
	#list.pop - remove o item da posição solicitada.
		cidades.pop(0) # remove Gramado
	
	#list.sort - organiza a lista em ordem alfabética
		cidades.sort()
	
	#list.extend(list2) - adiciona uma lista na outra.
		numeros.extend(letras)
	
	#list('string') - cria uma lista com os caracteres da string.
		list('comprar') # ['c', 'o', 'm', 'p', 'r', 'a', 'r']
		list('12345') # ['1', '2', '3', '4', '5']
	
	#zip.(lista1,lista2) - junta duas listas de modo que o [i] de uma junta com o [i] de outra.
		cores = ['preto', 'branco', 'cinza', 'azul']
		valores = [10,20,30,40]
		teste = zip(cores,valores) --> [('preto', 10), ('branco', 20), ('cinza', 30), ('azul', 40)]
		para printar, deve-se colocar: print(list(teste))

	#list.split(',' |' ' | 'o' ) - separa a lista de acordo com os elementos que entre o parâmetro colocado no parênteses. 
		separando de acordo com vírgulas:
			frutas_lista = frutas_usuario.split(', ') #colocando ', ' para separar sempre que tiver vírgula + espaço
			input - maça, banana, uva 
			print -> ['maça', 'banana', 'uva']
			
			
Tuples
	A diferença entre tuples e lista, é que na tuple vc não pode alterar.
	Se o conteúdo é FIXO e nunca vai ser alterado, é melhor usar tuple.
	Se o conteúdo pode ser que no futuro seja alterado, é melhor usar listas.
	Tuple é mais leve, lista gasta mais memória.
	cores_tuple = ('preto', 'branco', 'cinza', 'azul') # Parênteses ao invés de colchetes
	

Arrays
	Utiliza-se Arrays quando uma lista é muito grande.
	deve-se importar com a linha de código "from array import array" (linha 1).
		from array import array

	letras = ['a','b','c','d']
	numeros_i = [10,20,30,40]
	numeros_f = [1.2,2.2,3.2]
	
	letras = array('u', ['a','b','c','d']) -> typecode u = Strings
	inteiros = array('i', [10,20,30,40]) -> typecode i = Integers
	float = array('f', [1.2,2.2,3.2]) -> typecode f = Float
	
	
Sets
	Um Set é similar a listas, evita itens duplicados e não utiliza index.
	num1 = set(list1) -> [10,20,30,40,50]
	num2 = set(list2) -> [10,20,60,70]
	list1 = set([1,2,3,4,5,6])
	s1 = {1,2,3,4,5,6}


	
	
	print(num1 | num2) -> {70, 40, 10, 50, 20, 60, 30}
		| = union. Ele unifica as 2 listas e não repete os valores que estão repetidos, mas ainda os mostra.
	
	print(num1 - num2) -> {40, 50, 30}
		- = difference. Ele mostra apenas os números que estão na lista 1 e não na lista 2.
	
	print(num1 ^ num2) -> {70, 40, 50, 60, 30}
		^ = symmetric difference. Ele mostra as 2 listas juntas, e retira os valores repetidos, mostrando apenas os que não se repetem
	
	print(num1 & num2) -> {10, 20}
		& = and. Mostra apenas os itens que estão duplicados nas 2 listas.

	print(len(num1)) -> 5
		len -> lenght. Mostra quantos elementos tem no set.

Funções em Sets
	s1 = {1,2,3,4,5,6,1,2,3}
	
	s1.add(7) -> adiciona um item no final.
	s1.add(1) -> {1, 2, 3, 4, 5, 6, 7} pois ele ignora os duplicados (já tinha o 1).
	
	s1.update([1,2,8,9]) -> adiciona o 8 e o 9, pois o 1 e o 2 já existia.	
		print -> {1, 2, 3, 4, 5, 6, 7, 8, 9}

	s1.remove(9) -> remove o 9
	s1.discard(8) -> remove o 8
	remove e discard fazem a mesma coisa, só que o remove dá erro se o item não estiver no set.
	
	set4 = set1.union(set2) -> une os 2 e mostra todos os elementos sem repetir.
	set4 = set1.difference(set3)

Dicionário
	Dicionários utilizam index no formato de keys e de values, e aceita string, int, float, boolean.
	aluno = {'nome':'Ana', 'idade': 16, 'nota final': 'A','aprovação': True}
				nome = key | Ana = value 
				idade = key | 16 = value 
				nota final = key | A = value
				aprovação = key | True = value
	
	print(aluno['nome']) # pois usa o index no formato de keys e values
	print(aluno.get('nome')) -> retorna o nome
	print(aluno.get('nomesss', 'nao existe')) -> se nao existir, retorna o "não existe"

		
	del aluno['idade'] -> remove a idade
	aluno['nome'] = 'José'
	aluno.update({'nome': 'José', 'nota final': 'B', endereco: 'Rua A', 'materias': ['Fisica','Quimica','Matematica']}) -> neste método, é possível atualizar mais de um ao mesmo tempo, e ainda adicionar
	
Imprimindo no Dicionário com Loop	
	for i in aluno: -> imprime apenas os values
		print(aluno[i])

	for i in aluno.values(): -> imprime apenas os values
		print(i)

	for i in aluno.items(): -> imprime keys e values
		print(i)
	
	for keys,values in aluno.items(): -> imprime keys e values
		print(keys, values)
		
	print(aluno.get('materias')) # mostra as 3 materias q ele faz
	print(len(aluno)) # mostra a quantidade de keys (5)
	print(aluno.keys()) # mostra as keys
	print(aluno.values()) # mostra os values
	print(aluno.items()) # mostra os itens (keys e values)

Função Lambda
	É uma função pequena e sem nome, podendo ter vários argumentos, mas somente uma expressão.
	É muito utilizada dentro de outras funções, e deixa o código mais limpo.
	somar = lambda x: x+10
		print(somar(2)) --> 2 + 10 = 12
	somar = lambda x,y: x + y + 10
		print(somar(4,2)) --> 5 + 2 + 10 = 16

Função Map
	função() --> calcula x * 2
	lista1 = [1,2,3,4]
	lista2 = map(função,lista1) --> 1*2 | 2*2 | 3*2 | 4*2 | 5*2
	print(list(lista2)) --> tem q ser printado em lista.
	
Função Filter
	Filtrando valores abaixo de 20.
	valores = [10,12,34,44,57]

	def remover20(x):
		return x>20

	print(list(filter(remover20,valores))) # com função 
		print --> [34,44,57]
		
List Comprehension com String
	Forma mais facil de escrever, utilizado quando voce precisa criar uma nova lista a partir de outra existente
	frutas4 = [letra for letra in frutas1 if 'b' in letra]
	
Generator Expressions
	Uma forma mais rápida para listas, dicionários e etc.
	Usando ele, utiliza menos memória alocada
	Para usar, só trocar o colchetes das listas pelos parênteses.
	Utilizado quando você precisa rodar um numero muito grande na memoria.
	
	numeros2 = [x*10 for x in range(5)] --> (x*10 for x in range(5))


Exception
	try:
		letras = ['a','b','c']
		print(letras[3]) --> não existe, vai dar erro.
	except IndexError: --> o erro que dá.
		print('Index não existe.') # se der indexerror, ele não dará erro, ele vai dar uma exceção.
		
	try:
		valor = int(input('Digite o valor do seu produto: ')) 
	except ValueError:
		print('Digite um valor válido.') # vai dar erro, porém o programa não vai encerrar.


	try:
		valor = int(input('Digite o valor do seu produto: '))
	except ValueError:
		print('Digite um valor válido.') # vai dar erro, porém o programa não vai encerrar.
	else:
		print('Usuário digitou um valor correto.')
		comissão = valor * 0.3
		print(f' o valor do produto será de R$ {valor + comissão}.')
		
	Se digitar correto, o else será ativado e o exception não.
	Se digitar errado, o exception será ativado e o else não.
	
	
	finally --> executa de todo jeito, se der certo ou errado.
	try:
		valor = int(input('Digite o valor do seu produto: '))
	except ValueError:
		print('Digite um valor válido.') # vai dar erro, porém o programa não vai encerrar.
	finally:
		print('Código finalizado.')
	